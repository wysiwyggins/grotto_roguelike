{"id":"node_modules/@pixi/assets/lib/loader/parsers/LoaderParser.mjs","dependencies":[{"name":"/Users/wileywiggins/Development/grotto_roguelike/node_modules/@pixi/assets/lib/loader/parsers/LoaderParser.mjs.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/wileywiggins/Development/grotto_roguelike/package.json","includedInParent":true,"mtime":1686171865537},{"name":"/Users/wileywiggins/Development/grotto_roguelike/node_modules/@pixi/assets/package.json","includedInParent":true,"mtime":499162500000}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LoaderParserPriority = void 0;\nvar LoaderParserPriority = /* @__PURE__ */(LoaderParserPriority2 => {\n  LoaderParserPriority2[LoaderParserPriority2[\"Low\"] = 0] = \"Low\";\n  LoaderParserPriority2[LoaderParserPriority2[\"Normal\"] = 1] = \"Normal\";\n  LoaderParserPriority2[LoaderParserPriority2[\"High\"] = 2] = \"High\";\n  return LoaderParserPriority2;\n})(LoaderParserPriority || {});\nexports.LoaderParserPriority = LoaderParserPriority;"},"sourceMaps":{"js":{"mappings":[{"source":"../../../src/loader/parsers/LoaderParser.ts","name":null,"original":{"line":12,"column":12},"generated":{"line":7,"column":0}},{"source":"../../../src/loader/parsers/LoaderParser.ts","name":null,"original":{"line":12,"column":12},"generated":{"line":7,"column":4}},{"source":"../../../src/loader/parsers/LoaderParser.ts","name":null,"original":{"line":12,"column":12},"generated":{"line":7,"column":24}},{"source":"../../../src/loader/parsers/LoaderParser.ts","name":null,"original":{"line":12,"column":12},"generated":{"line":7,"column":27}},{"source":"../../../src/loader/parsers/LoaderParser.ts","name":null,"original":{"line":12,"column":12},"generated":{"line":7,"column":42}},{"source":"../../../src/loader/parsers/LoaderParser.ts","name":null,"original":{"line":12,"column":12},"generated":{"line":7,"column":43}},{"source":"../../../src/loader/parsers/LoaderParser.ts","name":null,"original":{"line":12,"column":7},"generated":{"line":7,"column":64}},{"source":"../../../src/loader/parsers/LoaderParser.ts","name":null,"original":{"line":12,"column":7},"generated":{"line":7,"column":68}},{"source":"../../../src/loader/parsers/LoaderParser.ts","name":null,"original":{"line":16,"column":4},"generated":{"line":8,"column":2}},{"source":"../../../src/loader/parsers/LoaderParser.ts","name":null,"original":{"line":16,"column":4},"generated":{"line":8,"column":23}},{"source":"../../../src/loader/parsers/LoaderParser.ts","name":null,"original":{"line":16,"column":4},"generated":{"line":8,"column":24}},{"source":"../../../src/loader/parsers/LoaderParser.ts","name":null,"original":{"line":16,"column":4},"generated":{"line":8,"column":45}},{"source":"../../../src/loader/parsers/LoaderParser.ts","name":null,"original":{"line":16,"column":4},"generated":{"line":8,"column":46}},{"source":"../../../src/loader/parsers/LoaderParser.ts","name":null,"original":{"line":16,"column":4},"generated":{"line":8,"column":51}},{"source":"../../../src/loader/parsers/LoaderParser.ts","name":null,"original":{"line":16,"column":4},"generated":{"line":8,"column":52}},{"source":"../../../src/loader/parsers/LoaderParser.ts","name":null,"original":{"line":16,"column":10},"generated":{"line":8,"column":55}},{"source":"../../../src/loader/parsers/LoaderParser.ts","name":null,"original":{"line":16,"column":4},"generated":{"line":8,"column":56}},{"source":"../../../src/loader/parsers/LoaderParser.ts","name":null,"original":{"line":16,"column":4},"generated":{"line":8,"column":57}},{"source":"../../../src/loader/parsers/LoaderParser.ts","name":null,"original":{"line":16,"column":4},"generated":{"line":8,"column":60}},{"source":"../../../src/loader/parsers/LoaderParser.ts","name":null,"original":{"line":16,"column":4},"generated":{"line":8,"column":65}},{"source":"../../../src/loader/parsers/LoaderParser.ts","name":null,"original":{"line":18,"column":4},"generated":{"line":9,"column":2}},{"source":"../../../src/loader/parsers/LoaderParser.ts","name":null,"original":{"line":18,"column":4},"generated":{"line":9,"column":23}},{"source":"../../../src/loader/parsers/LoaderParser.ts","name":null,"original":{"line":18,"column":4},"generated":{"line":9,"column":24}},{"source":"../../../src/loader/parsers/LoaderParser.ts","name":null,"original":{"line":18,"column":4},"generated":{"line":9,"column":45}},{"source":"../../../src/loader/parsers/LoaderParser.ts","name":null,"original":{"line":18,"column":4},"generated":{"line":9,"column":46}},{"source":"../../../src/loader/parsers/LoaderParser.ts","name":null,"original":{"line":18,"column":4},"generated":{"line":9,"column":54}},{"source":"../../../src/loader/parsers/LoaderParser.ts","name":null,"original":{"line":18,"column":4},"generated":{"line":9,"column":55}},{"source":"../../../src/loader/parsers/LoaderParser.ts","name":null,"original":{"line":18,"column":13},"generated":{"line":9,"column":58}},{"source":"../../../src/loader/parsers/LoaderParser.ts","name":null,"original":{"line":18,"column":4},"generated":{"line":9,"column":59}},{"source":"../../../src/loader/parsers/LoaderParser.ts","name":null,"original":{"line":18,"column":4},"generated":{"line":9,"column":60}},{"source":"../../../src/loader/parsers/LoaderParser.ts","name":null,"original":{"line":18,"column":4},"generated":{"line":9,"column":63}},{"source":"../../../src/loader/parsers/LoaderParser.ts","name":null,"original":{"line":18,"column":4},"generated":{"line":9,"column":71}},{"source":"../../../src/loader/parsers/LoaderParser.ts","name":null,"original":{"line":20,"column":4},"generated":{"line":10,"column":2}},{"source":"../../../src/loader/parsers/LoaderParser.ts","name":null,"original":{"line":20,"column":4},"generated":{"line":10,"column":23}},{"source":"../../../src/loader/parsers/LoaderParser.ts","name":null,"original":{"line":20,"column":4},"generated":{"line":10,"column":24}},{"source":"../../../src/loader/parsers/LoaderParser.ts","name":null,"original":{"line":20,"column":4},"generated":{"line":10,"column":45}},{"source":"../../../src/loader/parsers/LoaderParser.ts","name":null,"original":{"line":20,"column":4},"generated":{"line":10,"column":46}},{"source":"../../../src/loader/parsers/LoaderParser.ts","name":null,"original":{"line":20,"column":4},"generated":{"line":10,"column":52}},{"source":"../../../src/loader/parsers/LoaderParser.ts","name":null,"original":{"line":20,"column":4},"generated":{"line":10,"column":53}},{"source":"../../../src/loader/parsers/LoaderParser.ts","name":null,"original":{"line":20,"column":11},"generated":{"line":10,"column":56}},{"source":"../../../src/loader/parsers/LoaderParser.ts","name":null,"original":{"line":20,"column":4},"generated":{"line":10,"column":57}},{"source":"../../../src/loader/parsers/LoaderParser.ts","name":null,"original":{"line":20,"column":4},"generated":{"line":10,"column":58}},{"source":"../../../src/loader/parsers/LoaderParser.ts","name":null,"original":{"line":20,"column":4},"generated":{"line":10,"column":61}},{"source":"../../../src/loader/parsers/LoaderParser.ts","name":null,"original":{"line":20,"column":4},"generated":{"line":10,"column":67}},{"source":"../../../src/loader/parsers/LoaderParser.ts","name":null,"original":{"line":12,"column":12},"generated":{"line":11,"column":2}},{"source":"../../../src/loader/parsers/LoaderParser.ts","name":null,"original":{"line":12,"column":12},"generated":{"line":11,"column":9}},{"source":"../../../src/loader/parsers/LoaderParser.ts","name":null,"original":{"line":12,"column":12},"generated":{"line":11,"column":30}},{"source":"../../../src/loader/parsers/LoaderParser.ts","name":null,"original":{"line":12,"column":12},"generated":{"line":12,"column":0}},{"source":"../../../src/loader/parsers/LoaderParser.ts","name":null,"original":{"line":12,"column":12},"generated":{"line":12,"column":1}},{"source":"../../../src/loader/parsers/LoaderParser.ts","name":null,"original":{"line":12,"column":12},"generated":{"line":12,"column":3}},{"source":"../../../src/loader/parsers/LoaderParser.ts","name":null,"original":{"line":12,"column":12},"generated":{"line":12,"column":23}},{"source":"../../../src/loader/parsers/LoaderParser.ts","name":null,"original":{"line":12,"column":12},"generated":{"line":12,"column":27}},{"source":"../../../src/loader/parsers/LoaderParser.ts","name":null,"original":{"line":12,"column":12},"generated":{"line":12,"column":28}},{"source":"../../../src/loader/parsers/LoaderParser.ts","name":null,"original":{"line":12,"column":12},"generated":{"line":12,"column":29}},{"source":"../../../src/loader/parsers/LoaderParser.ts","name":null,"original":{"line":12,"column":12},"generated":{"line":12,"column":30}},{"source":"../../../src/loader/parsers/LoaderParser.ts","name":null,"original":{"line":12,"column":12},"generated":{"line":13,"column":0}},{"source":"../../../src/loader/parsers/LoaderParser.ts","name":null,"original":{"line":12,"column":12},"generated":{"line":13,"column":7}},{"source":"../../../src/loader/parsers/LoaderParser.ts","name":null,"original":{"line":12,"column":12},"generated":{"line":13,"column":8}},{"source":"../../../src/loader/parsers/LoaderParser.ts","name":null,"original":{"line":12,"column":12},"generated":{"line":13,"column":28}},{"source":"../../../src/loader/parsers/LoaderParser.ts","name":null,"original":{"line":12,"column":12},"generated":{"line":13,"column":31}},{"source":"../../../src/loader/parsers/LoaderParser.ts","name":null,"original":{"line":12,"column":12},"generated":{"line":13,"column":51}}],"sources":{"../../../src/loader/parsers/LoaderParser.ts":"import type { ExtensionMetadata } from '@pixi/core';\nimport type { Loader } from '../Loader';\nimport type { LoadAsset } from '../types';\n\n/**\n * The extension priority for loader parsers.\n * Helpful when managing multiple parsers that share the same extension test.\n * The higher priority parsers will be checked first.\n * @memberof PIXI\n * @enum {number}\n */\nexport enum LoaderParserPriority\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    /** Generic parsers: txt, json, webfonts */\n    Low = 0,\n    /** PixiJS assets with generic extensions: spritesheets, bitmapfonts  */\n    Normal = 1,\n    /** Specific texture types: svg, png, ktx, dds, basis */\n    High = 2,\n}\n\n/**\n * All functions are optional here. The flow:\n *\n * for every asset,\n *\n * 1. `parser.test()`: Test the asset url.\n * 2. `parser.load()`: If test passes call the load function with the url\n * 3. `parser.testParse()`: Test to see if the asset should be parsed by the plugin\n * 4. `parse.parse()`: If test is parsed, then run the parse function on the asset.\n *\n * some plugins may only be used for parsing,\n * some only for loading\n * and some for both!\n * @memberof PIXI\n */\nexport interface LoaderParser<ASSET = any, META_DATA = any, CONFIG = Record<string, any>>\n{\n    extension?: ExtensionMetadata;\n\n    /** A config to adjust the parser */\n    config?: CONFIG;\n\n    /** The name of the parser (this can be used when specifying loadParser in a LoadAsset) */\n    name?: string;\n\n    /**\n     * each URL to load will be tested here,\n     * if the test is passed the assets are loaded using the load function below.\n     * Good place to test for things like file extensions!\n     * @param url - The URL to test\n     * @param loadAsset - Any custom additional information relevant to the asset being loaded\n     * @param loader - The loader instance\n     */\n    test?: (url: string, loadAsset?: LoadAsset<META_DATA>, loader?: Loader) => boolean;\n\n    /**\n     * This is the promise that loads the URL provided\n     * resolves with a loaded asset if returned by the parser.\n     * @param url - The URL to load\n     * @param loadAsset - Any custom additional information relevant to the asset being loaded\n     * @param loader - The loader instance\n     */\n    load?: <T>(url: string, loadAsset?: LoadAsset<META_DATA>, loader?: Loader) => Promise<T>;\n\n    /**\n     * This function is used to test if the parse function should be run on the asset\n     * If this returns true then parse is called with the asset\n     * @param asset - The loaded asset data\n     * @param loadAsset - Any custom additional information relevant to the asset being loaded\n     * @param loader - The loader instance\n     */\n    testParse?: (asset: ASSET, loadAsset?: LoadAsset<META_DATA>, loader?: Loader) => Promise<boolean>;\n\n    /**\n     * Gets called on the asset it testParse passes. Useful to convert a raw asset into something more useful than\n     * @param asset - The loaded asset data\n     * @param loadAsset - Any custom additional information relevant to the asset being loaded\n     * @param loader - The loader instance\n     */\n    parse?: <T>(asset: ASSET, loadAsset?: LoadAsset<META_DATA>, loader?: Loader) => Promise<T>;\n\n    /**\n     * If an asset is parsed using this parser, the unload function will be called when the user requests an asset\n     * to be unloaded. This is useful for things like sounds or textures that can be unloaded from memory\n     * @param asset - The asset to unload/destroy\n     * @param loadAsset - Any custom additional information relevant to the asset being loaded\n     * @param loader - The loader instance\n     */\n    unload?: (asset: ASSET, loadAsset?: LoadAsset<META_DATA>, loader?: Loader) => void;\n}\n"},"lineCount":null}},"error":null,"hash":"f4fb3c08480dcb4669f6e82e112ba4ad","cacheData":{"env":{}}}